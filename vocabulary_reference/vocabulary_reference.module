<?php

//$Id$;
/**
 * @file
 * 
 * 
 * 
 */

/**
 * Implements hook_form_alter().
 * 
 */
function vocabulary_reference_form_alter(&$form, &$form_state, $form_id) {
  // Allow select multiple vocabularies.
  if ($form_id == 'field_ui_field_settings_form' || $form_id == 'field_ui_field_edit_form') {
    $field_info = array();
    if (isset($form['instance'])) {
      // Get field info of specify bundle, field type
      $field_infos = _vocabulary_reference_bundle_add_field_type(
              $form['instance']['entity_type']['#value'], $form['instance']['bundle']['#value'], 'taxonomy_term_reference'
      );
      if (isset($field_infos) && is_array($field_infos)) {
        $field_info = reset($field_infos);
      }
    }

    if (isset($form['field']['type']['#value']) && $form['field']['type']['#value'] == 'taxonomy_term_reference' || $field_type['field_type'] = 'taxonomy_term_reference') {
      if (isset($form['field']['settings']['allowed_values'])) {
        // Save original value to another variable. May be use later
        $original_allowed_values = $form['field']['settings']['allowed_values'];
        // Unset old value
        unset($form['field']['settings']['allowed_values']);
        // Load all vocabularies to build form
        $vocabularies = taxonomy_vocabulary_load_multiple(FALSE);
        // Each vocabulary, create form type checkbox.
        // The reason we don't use field type select multiple here is:
        // - It will fail when taxonomy_field_validate checking...
        foreach ($vocabularies as $vid => $vocabulary) {

          $form['field']['settings']['allowed_values'][$vid]['vocabulary'] = array(
            '#type' => 'checkbox',
            '#title' => t($vocabulary->name),
          );

          $default = 0;
          if (isset($form['#field'])) {
            $default = $form['#field']['settings']['allowed_values'][$vid]['vocabulary'];
            $parent = $form['#field']['settings']['allowed_values'][$vid]['parent'];
          }
          elseif (isset($original_allowed_values[$vid]['vocabulary']['#default_value'])) {
            $default = $original_allowed_values[$vid]['vocabulary']['#default_value'];
            $parent = $original_allowed_values[$vid]['parent'];
          }
          // Set parent
          $form['field']['settings']['allowed_values'][$vid]['parent'] = array(
            '#type' => 'value',
            '#value' => $parent,
          );
          // Set default value
          $form['field']['settings']['allowed_values'][$vid]['vocabulary']['#default_value'] = $default;

          if (!isset($form['field']['settings']['allowed_values'][$vid]['parent'])) {
            $form['field']['settings']['allowed_values'][$vid]['parent']['#value'] = 0;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_attach_form().
 * 
 */
function vocabulary_reference_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  
  $info_bundles = field_info_bundles($entity_type);
  if ($bundle_property = _vocabulary_reference_entity_extract_bundle($entity_type)) {
    $vocabularies = array();
    $bundle_name = $entity->$bundle_property;
    // Get all taxonomy_term_reference fields
    $term_fields = array_keys(_vocabulary_reference_bundle_add_field_type($entity_type, $bundle_name, 'taxonomy_term_reference'));
    
    foreach ($term_fields as $term_field) {
      if (isset($form[$term_field])) {
        // Detect form field taxonomy_term_reference is #tree or not
        $element = $form[$term_field];
        if (!isset($form[$term_field][$langcode]) || !empty($form[$term_field][$langcode])) {
          $langcode = 'und';
        }
        
        // Set options / change propert multiple to TRUE
        if ($form[$term_field]['#tree'] == TRUE) {
          $element = $form[$term_field][$langcode];
          $options = vocabulary_reference_allowed_values($form_state['field'][$term_field][$langcode]['field']);
        }
        $form[$term_field][$langcode]['#options'] = $options;
        $form[$term_field][$langcode]['#multiple'] = TRUE;
        
        // Load default values
        $default_values = array();
        if (isset($entity->{$term_field}) && isset($entity->{$term_field}[$langcode]) && is_array($entity->{$term_field}[$langcode])) {
          foreach ($entity->{$term_field}[$langcode] as $default) {
            $default_values[$default['tid']] = $default['tid'];
          }
        }
        $form[$term_field][$langcode]['#default_value'] = $default_values;
      }
    }
  }
}

/**
 * Extract bundle property from entity info
 */
function _vocabulary_reference_entity_extract_bundle($entity_type) {
  $entity_info = entity_get_info($entity_type);
  return isset($entity_info['entity keys']['bundle']) ? $entity_info['entity keys']['bundle'] : FALSE;
}

/**
 * Extract full field info of bundle.
 */
function _vocabulary_reference_bundle_add_field_type($entity_type, $bundle_name, $field_type) {
  $fields_info = _field_info_collate_fields();
  $instance_info = field_info_instances($entity_type, $bundle_name);
  $return = array();
  foreach ($instance_info as $field => $info) {
    $field_id = $info['field_id'];
    if ($fields_info['fields'][$field_id]['type'] == $field_type) {
      $info['field_type'] = $field_type;
      $return[$field] = $info;
    }
  }
  return $return;
}

/**
 * Returns the set of valid terms for a taxonomy field.
 *
 * @param $field
 *   The field definition.
 * @return
 *   The array of valid terms for this field, keyed by term id.
 */
function vocabulary_reference_allowed_values($field) {
  $options = array();
  foreach ($field['settings']['allowed_values'] as $vid => $allowed) {
    if ($allowed['vocabulary'] == 1) {
      if ($vocabulary = taxonomy_vocabulary_load($vid)) {
        if ($terms = taxonomy_get_tree($vid)) {
          foreach ($terms as $term) {
            $options[$vocabulary->name][$term->tid] = str_repeat('-', $term->depth) . $term->name;
          }
        }
      }
    }
  }
  //dpm($options);
  return $options;
}
